"-------------------------------------------------- .neobundle
if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
    NeoBundle 'Shougo/vimproc', {
    \ 'build' : {
    \     'windows' : 'echo "Sorry, cannot update vimproc binary file in Windows."',
    \     'cygwin' : 'make -f make_cygwin.mak',
    \     'mac' : 'make -f make_mac.mak',
    \     'unix' : 'make -f make_unix.mak',
    \   },
    \ }
    NeoBundle 'Shougo/unite.vim'
    NeoBundle 'Shougo/neomru.vim'

    NeoBundle 'Shougo/neocomplete.vim'
    NeoBundle 'Shougo/neosnippet.vim'
    NeoBundle 'Shougo/neosnippet-snippets'

    NeoBundle 'Shougo/vimshell'
    NeoBundle 'Shougo/vimfiler.vim'
    NeoBundle 'renamer.vim'

    NeoBundle 'The-NERD-Commenter'
    NeoBundle 'surround.vim'
    NeoBundle 'Align'
    NeoBundle 'rhysd/clever-f.vim'

    NeoBundle 'altercation/vim-colors-solarized'
    NeoBundle 'molokai'
    NeoBundle 'Lokaltog/vim-powerline'

    NeoBundle 'thinca/vim-quickrun'
    NeoBundle 'sukima/xmledit'
    NeoBundle 'mattn/emmet-vim'
    NeoBundle 'plasticscafe/vim-less-autocompile'
    NeoBundle 'groenewege/vim-less'

    " NeoBundle 'glidenote/memolist.vim'
    NeoBundle 'woowee/memolist.vim'

    NeoBundle 'mattn/webapi-vim'
    NeoBundle 'ujihisa/blogger.vim'
    NeoBundle 'kannokanno/previm'
    NeoBundle 'tyru/open-browser.vim'

    NeoBundle 'yuratomo/w3m.vim'
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck


"" plugins下のディレクトリをruntimepathへ追加する。
"for s:path in split(glob($VIM.'/plugins/*'), '\n')
"  if s:path !~# '\~$' && isdirectory(s:path)
"    let &runtimepath = &runtimepath.','.s:path
"  end
"endfor
"unlet s:path
"
"
""-------------------------------------------------- .common
"" バックアップファイル - off
"set nobackup
"" スワップファイル - off
"set noswapfile
"" ファイルタイプ識別 - on
"filetype plugin on
"" ビープ
"set vb t_vb=
"" 保存していない状態でも他のファイルを開く
"set hidden
"" 検索置換
"set smartcase
"" クリップボード.os の クリップボードを
"set clipboard+=unnamed
"" クリップボード.vim の ヤンクを
"set clipboard=unnamed
"
"
""-------------------------------------------------- .appearance
"" 行番号
"set number
"" 不可視文字 - 表示
"set list
"set listchars=tab:>-,trail:_
"" カーソル行
"set cursorline
"" カーソル行. カレントウィンドウのみ
"augroup cch
"  autocmd! cch
"  autocmd WinLeave * set nocursorline
"  autocmd WinEnter,BufRead * set cursorline
"augroup END


"-------------------------------------------------- .edit
"" インサートモード時imeオフ
"set noimdisable
"set iminsert=0 imsearch=0
"set noimcmdline
"" 折り返し移動
"set whichwrap=b,s,h,l,<,>,[,]
"" バックスペース
"set backspace=indent,eol,start
"
"" タブ
"" タブ. 画面上表示するタブ幅
"set tabstop=4
"" タブ. <tab>押下によるタブ幅(tabstopと同じにした）
"set softtabstop=4
"" タブ.
"set shiftwidth=4
"
"" 保存時の空白削除
"autocmd BufWritePre * if &ft != 'markdown' | :%s/\s\+$//ge  | endif
"autocmd BufWritePre * :%s/\t/    /ge
"autocmd BufWritePre * :%s/　\+$//ge
"
"" 折り返し
"set textwidth=0
"set formatoptions=q
"
"autocmd FileType text setlocal wrap


"-------------------------------------------------- .encording
"set ffs=unix,dos,mac  " 改行文字
"set encoding=utf-8    " デフォルトエンコーディング
"
"" cvsの時は文字コードをeuc-jpに設定
"autocmd FileType cvs :set fileencoding=euc-jp
"" 以下のファイルの時は文字コードをutf-8に設定
"autocmd FileType svn :set fileencoding=utf-8
"autocmd FileType js :set fileencoding=utf-8
"autocmd FileType css :set fileencoding=utf-8
"autocmd FileType html :set fileencoding=utf-8
"autocmd FileType xml :set fileencoding=utf-8
"autocmd FileType java :set fileencoding=utf-8
"autocmd FileType scala :set fileencoding=utf-8
"
"" ワイルドカードで表示するときに優先度を低くする拡張子
"set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.to
"
"" 指定文字コードで強制的にファイルを開く
"command! Cp932 edit ++enc=cp932
"command! Eucjp edit ++enc=euc-jp
"command! Iso2022jp edit ++enc=iso-2022-jp
"command! Utf8 edit ++enc=utf-8
"command! Jis Iso2022jp
"command! Sjis Cp932
"
"" my commands . blogger.vim
"command! -nargs=0 List :e blogger:list
"command! -nargs=0 Post :w blogger:create


"-------------------------------------------------- .complete
"set wildmenu
"set wildchar=<tab>
"set wildmode=list:full
"set history=1000
"set complete+=k


""-------------------------------------------------- .key mapping
"" 検索ハイライト off
"set hlsearch
"nmap <ESC><ESC> ;nohlsearch<CR><ESC>
"" ヘルプ
"nnoremap <C-i> :<C-u>help<Space>
"nnoremap <C-i><C-i> :<C-u>help<Space><C-r><C-w><Enter>
"" カーソル移動
"nnoremap h <left>
"nnoremap j gj
"nnoremap k gk
"nnoremap l <right>
"nnoremap <Down> gj
"nnoremap <Up> gk
"" ウィンドウ移動
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-h> <C-w>h
"nnoremap <C-l> <C-w>l
"" 行頭、行末移動
"noremap =0 $
"" カーソルの位置から行頭、行末まで選択
"vnoremap v $h
"" 対応する括弧移動
"noremap [ %
"noremap ] %
"" カーソル位置の単語yank
"nnoremap vy vawy
"
"" タイムスタンプ
"inoremap ,dd <C-r>=strftime('%Y.%m.%d')<Return>
"inoremap ,ddd <C-r>=strftime('%Y%m%d')<Return>
""ウィンドウサイズ
"map + <C-w>+
"map - <C-w>-
"
"" 。/、セットを．/，にする
"nnoremap <leader>. :%s/。/．/g<CR>:%s/、/，/g<CR>
"
""copy all
"noremap ya :%y<CR>


"-------------------------------------------------- .plugins
" ********** (source)
if filereadable(expand('~/.pwd.blogger'))
    source ~/.pwd.blogger
endif
" ref. http://vim-users.jp/2009/12/hack108/

" ********** w3m
let g:w3m#command = '/usr/local/bin/w3m'

" ********** vim-less-autocompile
autocmd BufRead,BufNewFile *.less set filetype=less
"自動で変換
let g:less_autocompile=1
"圧縮しない
let g:less_compress=0

" ********** vim-less
autocmd BufNewFile,BufRead *.less set filetype=css

" ********** previm
map <Leader>pv ;PrevimOpen<cr>

" ********** quickrun
" for python/vimproc
let g:quickrun_config = {}
let g:quickrun_config['*'] = {'runner': 'vimproc'}
" let g:quickrun_config['*'] = {'runmode': "async:remote:vimproc", 'split': 'below'}

let g:quickrun_config['markdown'] = {
      \ 'type': 'markdown/pandoc',
      \ 'cmdopt': '-s'
      \ }


" ********* memolist
map <Leader>mn ;MemoNew<cr>
" map <Leader>ml ;MemoList<CR>
map <Leader>ml ;Unite file:<C-r>=g:memolist_path<CR><CR>
map <Leader>mg ;MemoGrep<CR>

let g:memolist_path = '~/Dropbox/memo'

let g:memolist_prompt_tags = 0
let g:memolist_prompt_categories = 1
let g:memolist_qfixgrep = 1
let g:memolist_vimfiler = 0

let g:memolist_filename_prefix_none = 1
" ********** vimplenote
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimplenoterc
endif


" ********** the nerd commenter
let NERDSpaceDelims=1
let NREDShutUp=1
map <leader>x <leader>c<space>


" ********** neocomplete.vim
" neocomplete用設定
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'

inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif


" ********** align.vim
" 日本語など幅広文字に対応するためのおまじない。(ref. http://vim-users.jp/2009/09/hack77/)
let g:Align_xstrlen=3


" ********** unite
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <Leader>f [unite]

" unite.vim keymap
" https://github.com/alwei/dotfiles/blob/3760650625663f3b08f24bc75762ec843ca7e112/.vimrc
nnoremap <silent> [unite]h :<C-u>Unite<Space>file<CR>
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> [unite]b :<C-u>Unite<Space>buffer<CR>
nnoremap <silent> [unite]k :<C-u>Unite<Space>bookmark<CR>
nnoremap <silent> [unite]m :<C-u>Unite<Space>file_mru<CR>
nnoremap <silent> ,vr :UniteResume<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
    nmap <buffer> <esc><esc>    <Plug>(unite_exit)
    imap <buffer> jj    <Plug>(unite_insert_leave)
endfunction

nnoremap <Space>y :Unite history/yanks<CR>

" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')

let g:unite_enable_start_insert = 1

let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" unite : grep > ag(silver searcher)
nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" ********** surround.vim
let g:surround_{char2nr('c')} = "``` \1language\1 \r ```"



"-------------------------------------------------- .myscript
" ********** Single
function! s:ChangeToSingleByte()
    let l:dic = {}
    call extend(l:dic, {'０':'0','１':'1','２':'2','３':'3','４':'4','５':'5','６':'6','７':'7','８':'8','９':'9'})
    call extend(l:dic, {'①':'1','②':'2','③':'3','④':'4','⑤':'5','⑥':'6','⑦':'7','⑧':'8','⑨':'9'})
    call extend(l:dic, {'Ａ':'A','Ｂ':'B','Ｃ':'C','Ｄ':'D','Ｅ':'E','Ｆ':'F','Ｇ':'G','Ｈ':'H','Ｉ':'I','Ｊ':'J','Ｋ':'K','Ｌ':'L','Ｍ':'M','Ｎ':'N','Ｏ':'O','Ｐ':'P','Ｑ':'Q','Ｒ':'R','Ｓ':'S','Ｔ':'T','Ｕ':'U','Ｖ':'V','Ｗ':'W','Ｘ':'X', 'Ｙ':'Y','Ｚ':'Z'})
    call extend(l:dic, {'ａ':'a','ｂ':'b','ｃ':'c','ｄ':'d','ｅ':'e','ｆ':'f','ｇ':'g','ｈ':'h','ｉ':'i','ｊ':'j','ｋ':'k','ｌ':'l','ｍ':'m','ｎ':'n','ｏ':'o','ｐ':'p','ｑ':'q','ｒ':'r','ｓ':'s','ｔ':'t','ｕ':'u','ｖ':'v','ｗ':'w','ｘ':'x','ｙ':'y','ｚ':'z'})
    call extend(l:dic, {'（':'(', '）':')', '［':'[', '］':']', '｛':'{', '｝':'}', '＜':'<', '＞':'>', '”':'"', "’":"'", "‘":"'", '“':'"'})
    call extend(l:dic, {'￥':'\\','＆':'\&','／':'\/','：':':', '；':';', '＊':'*', '％':'%', '？':'?', '　':' ', '！':'!', '～':'-', '〜':'-', '―':'-', '＝':'=', '＋':'+'})
    "# do substitute
    for l:key in keys(l:dic)
        exe 'silent %s/'.l:key.'/'.l:dic[l:key].'/ge'
    endfor
    " exe 'silent %s/\d\zs．\ze\d[^$]/./ge'
    exe 'silent %s/\d\zs．d/./ge'
endfunction
command! -nargs=0 Single call <SID>ChangeToSingleByte()


" ********** Numb
" ref. http://kikaibunsho.web.fc2.com/monologo/memoro/08_11.html
" ref. http://vimdoc.sourceforge.net/htmldoc/eval.html#printf%28%29
function! s:InsertNumbering(cnt) range
    echo "'" . a:cnt . "'"
    let l:cntr = split(substitute(a:cnt, '\(^.\{-}\)\(\d\+\)\(.\{-}$\)', '\1,\2,\3', ''),',',1)

    let l:cnt = str2nr(l:cntr[1])

    let l:digits = (strlen(l:cntr[1]) < strlen(l:cnt + (a:lastline - a:firstline))) ? strlen(l:cnt + (a:lastline - a:firstline)) : strlen(l:cntr[1])

    let l:item = (a:cnt[0] != 0) ? "%" : "%0"

    for l:rec in range (a:firstline, a:lastline)
        let l:out = printf(l:item.l:digits.'d', l:cnt)
        call setline(l:rec, l:cntr[0] . l:out . l:cntr[2] . getline(l:rec))
        let l:cnt += 1
    endfor
endfunction

command! -nargs=+ -range Num <line1>, <line2> call <SID>InsertNumbering(<f-args>)


" 引用符, 括弧の設定 (ref. http://ymkjp.blogspot.jp/2012/04/vim.html)
inoremap {} {}<Left>
inoremap [] []<Left>
inoremap () ()<Left>
inoremap """ ""<Left>
inoremap ''' ''<Left>
inoremap <> <><Left>


"-------------------------------------------------- .

noremap ; :
noremap : ;

" 何か set nocompatible あるとハイライト? がおかしくなるんですよ... 気持ち悪いので，強引スマートじゃないのは分かっているけど無理矢理．
source ~/.gvimrc
