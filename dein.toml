[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
# build = 'make'
# on_source = ['unite.vim', 'vimshell.vim']
# "ref. https://github.com/Shougo/shougo-s-github/blob/cb1e0778e552517538d9cb8868a2b5fd1806ca69/vim/rc/deinlazy.toml#L4
hook_post_update = '''
  let g:dein#plugin.build = 'make'
  "ref. http://qiita.com/delphinus/items/cd221a450fd23506e81a#hook_post_update
'''
hook_add = '''
  let g:vimshell_prompt = "% "
  let g:vimshell_secondary_prompt="> "

  if has('win32') || has('win64')
    " Display user name on Windows.
    let g:vimshell_user_prompt = "$USERNAME.' in '.fnamemodify(getcwd(), ':~')"
  else
    " Display user name on Linux.
    let g:vimshell_user_prompt = "$USER.' in '.fnamemodify(getcwd(), ':~')"
  endif

  let g:vimshell_split_command="split"
  nmap <Leader>vs <Plug>(vimshell_split_switch)
  command! Vs :VimShell -split-command=split
  " ref. https://github.com/namutaka/dotfiles/blob/76e75c7f00a07788012b2985aeec7c2b649bdd39/vimrc
'''

#
# interface : denite.vim
#

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
# if = 'has("nvim")'
on_event = 'BufRead'
hook_add = '''
  " keymaiipng
  noremap [Denite] <Nop>
  nmap <Leader>f  [Denite]
  nnoremap [Denite]r :<C-u>Denite file_mru<CR>
  nnoremap [Denite]b :<C-u>Denite buffer<CR>
  nnoremap [Denite]f :<C-u>DeniteBufferDir file_rec<CR>
  nnoremap [Denite]g :<C-u>DeniteBufferDir grep<CR>
  nnoremap [Denite]h :<C-u>Denite help<CR>
  nnoremap [Denite]i :<C-u>Denite line<CR>
  "ref. https://github.com/tamy0612/dotfiles/blob/ecb0ea2dc22bbbf5b28422daa0a743e5a393918d/vim/config/plugins/mapping/denite.nvim
'''
hook_post_source = '''
  " キーマッピング．uniteを開いている間
  " ウィンドウを分割して開く
  call denite#custom#map('_', "<C-h>", '<denite:do_action:split>')
  call denite#custom#map('insert', "<C-h>", '<denite:do_action:split>')
  " ウィンドウを縦に分割して開く
  call denite#custom#map('_', "<C-v>", '<denite:do_action:vsplit>')
  call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
  " インサート→ノーマルモード
  call denite#custom#map('insert', "jj", '<denite:enter_mode:normal>')

  " use The Platinum Searcher (pt) command
  " file_rec
  call denite#custom#var('file_rec', 'command',
  \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
  " gerp
  call denite#custom#var('grep', 'command',
    \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
  call denite#custom#var('grep', 'default_opts', [])
  call denite#custom#var('grep', 'recursive_opts', [])
'''


#
# interface : unite.vim
#

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim']
if = '!has("nvim")'
hook_add = '''
  " 変数
  let g:unite_source_history_yank_enable = 1
  let g:unite_enable_start_insert = 1
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1
  let g:neomru#follow_links = 1

  let g:unite_source_find_default_opts = "-L"

  " path
  let g:neomru#file_mru_path=expand('~/.cache/neomru/file')
  let g:neomru#directory_mru_path=expand('~/.cache/neomru/directory')
  let g:unite_source_bookmark_directory=$HOME . '/.vim/unite/bookmarks'

  " キーマッピング
  " キーマッピング．プリフィクス¬
  noremap [Unite] <Nop>
  "nmap <Leader>f [Unite]
  nmap <Leader>u [Unite]
  " キーマッピング．mru¬
  noremap  [Unite]r :<C-u>Unite file_mru<CR>
  " キーマッピング．buffer
  noremap  [Unite]b :<C-u>Unite buffer<CR>
  " キーマッピング．file
  noremap  [Unite]f :<C-u>UniteWithBufferDir
                     \ -buffer-name=files file<CR>
  " キーマッピング．bookmark
  noremap  [Unite]m :<C-u>Unite bookmark<CR>
  " キーマッピング．register
  noremap  [Unite]g :<C-u>Unite
                     \ -buffer-name=register register<CR>
  " キーマッピング．keymappings
  nnoremap [Unite]p :<C-u>Unite mapping<CR>
  " キーマッピング．message
  nnoremap [Unite]i :<C-u>Unite output:message<CR>
  " キーマッピング．yank
  nnoremap [Unite]y :<C-u>Unite history/yank<CR>
  " キーマッピング．bookmarkadd
  nnoremap [unite]a :<C-u>UniteBookmarkAdd<CR>

  " キーマッピング．開いている間
  " ref. http://www.karakaram.com/unite
  autocmd FileType unite call s:unite_settings()
  function! s:unite_settings()
  " ウィンドウを分割して開く
    nnoremap <silent> <buffer> <expr>
          \ <C-h> unite#do_action('split')
    inoremap <silent> <buffer> <expr>
          \ <C-h> unite#do_action('split')
  " ウィンドウを縦に分割して開く
    nnoremap <silent> <buffer> <expr>
          \ <C-v> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr>
          \ <C-v> unite#do_action('vsplit')
  " インサート→ノーマルモード
    imap <buffer> jj <Plug>(unite_insert_leave)
  endfunction
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
hook_add = '''
  let g:neomru#follow_links=1
'''

[[plugins]]
repo = 'Shougo/unite-outline'
if = '!has("nvim")'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_add = '''
  " デフォルトはvimfiler (netrw ではない)
  let g:vimfiler_as_default_explorer = 1
  " セーフモードをオフ (ref. http://blog.livedoor.jp/okashi1/archives/51808590.html)
  let g:vimfiler_safe_mode_by_default = 0

  " 開く (開いているファイルがあるディレクトリ)
  nnoremap <silent> <Leader>fc :<C-u>VimFilerBufferDir -quit<CR>
  " ide 風 (開いているファイルがあるディレクトリ)
  nnoremap <silent> <Leader>fl :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -toggle -no-quit<CR>

  augroup vimfiler
    autocmd!
    autocmd FileType vimfiler call s:vimfiler_settings()
  augroup END
  function! s:vimfiler_settings()
    " tree での制御は、<Space>
    map <silent><buffer> <Space> <NOP>
    nmap <silent><buffer> <Space> <Plug>(vimfiler_expand_tree)
    nmap <silent><buffer> <S-Space> <Plug>(vimfiler_expand_tree_recursive)

    " オープンは、<CR>(enter キー)
    nmap <buffer><expr> <CR> vimfiler#smart_cursor_map(
            \ "\<Plug>(vimfiler_cd_file)",
            \ "\<Plug>(vimfiler_open_file_in_another_vimfiler)")

    " マークは、<C-Space>(control-space)
    nmap <silent><buffer> <C-Space> <Plug>(vimfiler_toggle_mark_current_line)
    vmap <silent><buffer> <C-Space> <Plug>(vimfiler_toggle_mark_selected_lines)

    nnoremap <buffer><expr> <C-h> vimfiler#do_switch_action('split')
    nnoremap <buffer><expr> <C-v> vimfiler#do_switch_action('vsplit')
    " :h vimfiler#do_switch_action()
    " ref. https://github.com/Shougo/vimfiler.vim/issues/274
    " ref. https://github.com/Shougo/vimfiler.vim/issues/114

    " 移動、<Tab> だけでなく <C-l> も
    nmap <buffer> <C-l> <plug>(vimfiler_switch_to_other_window)

  endfunction
  " ref. http://www.karakaram.com/vimfiler#vimrc
'''
on_source = '''
    let g:vimfiler_tree_leaf_icon     = " " " default: '|'
    let g:vimfiler_tree_opened_icon   = "-" " default: '-'
    let g:vimfiler_tree_opened_icon   = "▾"
    let g:vimfiler_tree_closed_icon   = "+" " default: '+'
    let g:vimfiler_tree_closed_icon   = "▸"
    let g:vimfiler_readonly_file_icon = "!" " deafult: 'X'
  " let g:vimfiler_file_icon          = '-' " default: '-' why?
    let g:vimfiler_marked_file_icon   = '*' " default: '*'
    " ref. http://blog.scimpr.com/2013/03/06/vimfiler%E3%81%AF%E3%81%98%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F/
'''


#
# completion
#

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
on_i = 1
hook_add = '''
  " AutoComplPop オフ
  let g:acp_enableAtStartup = 0
  " 起動時 neocomplete を有効化
  let g:neocomplete#enable_at_startup = 1
  " 大文字を入力するまで、大/小文字を無視して補完
  let g:neocomplete#enable_smart_case = 1
  " 3 文字以上の単語を補完候補としてキャッシュ
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  " neocompleteを自動的にロックするバッファ名のパターン
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
  " 日本語入力時、無効化
  let g:neocomplete#lock_iminsert = 1
  " 補完開始文字数
  let g:neocomplete#auto_completion_start_length=3

  " 辞書
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'vim' : $HOME.'/.vim/dict/vim.dict'
          \ }

  " キーワードと見なす正規表現を設定
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  " \h: [A-Za-z_] \w: [0-9A-Za-z_] refs help regexp
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g> neocomplete#undo_completion()
  " inoremap <expr><C-l> neocomplete#complete_common_string()     # `inoremap <C-l><Right>` を使いたいので

  " 入力モード ひらがな (im "on" の状態) で改行すると、英字 (im "off") モードになってしまうのでコメント
  "" Recommended key-mappings.
  "" <CR>: close popup and save indent.
  "inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  "function! s:my_cr_function()
  "  return neocomplete#close_popup() . "\<CR>"
  "endfunction

  " TAB で補完できるようにする
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
  " <C-h>, <BS>: ポップアップを閉じ、文字列を削除
  " inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>" # `inoremap <C-h><Left>`を使いたいので
  " inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"  # `inoremap <C-h><Left>`を使いたいので

  " FileType毎のOmni補完を設定
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_event = 'InsertCharPre'
on_i = 1
on_ft = 'snippet'
hook_source = '''
  " my defined snippet files.
  let g:neosnippet#snippets_directory='~/.vim/snippets'
  " Plugin key-mappings.
  imap <C-Space>     <Plug>(neosnippet_expand_or_jump)
  smap <C-Space>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-Space>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


#
#
#
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

## マデ

[[plugins]]
repo = 'Shougo/vimshell'


#
# edit
#
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-jabraces'
hook_add = '''
  let g:textobj_multitextobj_textobjects_i = [
      \ "\<Plug>(textobj-multiblock-i)",
      \ "\<Plug>(textobj-jabraces-parens-i)",
      \ "\<Plug>(textobj-jabraces-braces-i)",
      \ "\<Plug>(textobj-jabraces-brackets-i)",
      \ "\<Plug>(textobj-jabraces-angles-i)",
      \ "\<Plug>(textobj-jabraces-double-angles-i)",
      \ "\<Plug>(textobj-jabraces-kakko-i)",
      \ "\<Plug>(textobj-jabraces-double-kakko-i)",
      \ "\<Plug>(textobj-jabraces-yama-kakko-i)",
      \ "\<Plug>(textobj-jabraces-double-yama-kakko-i)",
      \ "\<Plug>(textobj-jabraces-kikkou-kakko-i)",
      \ "\<Plug>(textobj-jabraces-sumi-kakko-i)",
  \]
  let g:textobj_multitextobj_textobjects_a = [
      \ "\<Plug>(textobj-multiblock-a)",
      \ "\<Plug>(textobj-jabraces-parens-a)",
      \ "\<Plug>(textobj-jabraces-braces-a)",
      \ "\<Plug>(textobj-jabraces-brackets-a)",
      \ "\<Plug>(textobj-jabraces-angles-a)",
      \ "\<Plug>(textobj-jabraces-double-angles-a)",
      \ "\<Plug>(textobj-jabraces-kakko-a)",
      \ "\<Plug>(textobj-jabraces-double-kakko-a)",
      \ "\<Plug>(textobj-jabraces-yama-kakko-a)",
      \ "\<Plug>(textobj-jabraces-double-yama-kakko-a)",
      \ "\<Plug>(textobj-jabraces-kikkou-kakko-a)",
      \ "\<Plug>(textobj-jabraces-sumi-kakko-a)",
  \]
  omap ab <Plug>(textobj-multitextobj-a)
  omap ib <Plug>(textobj-multitextobj-i)
  vmap ab <Plug>(textobj-multitextobj-a)
  vmap ib <Plug>(textobj-multitextobj-i)
  " ref. http://kainokikaede.hatenablog.com/entry/2014/11/09/124636
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multitextobj'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
  map sa <Plug>(operator-surround-append)
  map ds <Plug>(operator-surround-delete)
  map cs <Plug>(operator-surround-replace)
  " markdown code block ```...``` !!
  let g:operator#surround#blocks = {
  \ '-' : [
  \       { 'block' : ['[ ', ' ]'], 'motionwise' : ['char', 'line', 'block'], 'keys' : [' ]', ' ['] },
  \ ],
  \ 'markdown' : [
  \       { 'block' : ["**", "**"], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['**'] },
  \       { 'block' : ["```\n", "\n```"], 'motionwise' : ['line'], 'keys' : ['`'] },
  \ ] }
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  nmap <Leader>x <Plug>(caw:hatpos:toggle)     " 開始文字前
  vmap <Leader>x <Plug>(caw:hatpos:toggle)     " 開始文字前
  nmap <leader>x0 <plug>(caw:zeropos:toggle)   " 行頭
  vmap <leader>x0 <plug>(caw:zeropos:toggle)   " 行頭
  nmap <leader>xa <plug>(caw:dollarpos:toggle) " 行末
  vmap <leader>xa <plug>(caw:dollarpos:toggle) " 行末
'''

[[plugins]]
repo = 'vim-easy-align'
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)

  let g:easy_align_ignore_groups = []
  let g:easy_align_delimiters = {
  \ '.': { 'pattern': '\.\{2}\|\.\{3}' },
  \ '"': { 'pattern': '"', 'filter': 'v/^\s*"/', 'ignore_groups': ['String']},
  \ "'": { 'pattern': "'", 'filter': 'v/^\s*"/', 'ignore_groups': ['String']},
  \ '#': { 'pattern': ' #' },
  \ }

  " ref. https://github.com/junegunn/vim-easy-align/blob/master/EXAMPLES.md#aligning-in-line-comments
  " ref. https://github.com/ervandew/supertab/issues/74#issuecomment-65552406
  " :h easy-align-ignoring-delimiters-in-comments-or-strings
  " :h easy-align-6-8-1
  "
  command! -nargs=* -range Align <line1>, <line2>call easy_align#align('<bang>' == '!', 0, '', <q-args>)
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'

#
# appearance
#
[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'rking/ag.vim'

# NOTE:
[[plugins]]
repo = 'nixprime/cpsm'
build = './install.sh'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  " for python/vimproc
  let g:quickrun_config = {}
  let g:quickrun_config['*'] = {'runner': 'vimproc'}
  " let g:quickrun_config['*'] = {'runmode': "async:remote:vimproc", 'split': 'below'}

  let g:quickrun_config['markdown'] = {
        \ 'type': 'markdown/pandoc',
        \ 'cmdopt': '-s'
        \ }
  " swift
  autocmd BufRead,BufNewFile *.swift set filetype=swift
  let g:quickrun_config['swift'] = {
        \ 'command': 'xcrun',
        \ 'cmdopt': 'swift',
        \ 'exec': '%c %o %s',
        \}
'''

[[plugins]]
repo = 'sukima/xmledit'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'plasticscafe/vim-less-autocompile'
hook_add = '''
  augroup less_autocompile
    autocmd!
    autocmd BufRead,BufNewFile *.less set filetype=less
  augroup END
  "自動で変換
  let g:less_autocompile=1
  "圧縮しない
  let g:less_compress=0
'''

[[plugins]]
repo = 'groenewege/vim-less'
hook_add = '''
  augroup less
    autocmd!
    autocmd BufNewFile,BufRead *.less set filetype=css
  augroup END
'''

[[plugins]]
repo = 'toyamarinyon/vim-swift'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
  nnoremap <Leader>mn  :MemoNew<CR>
  nnoremap <Leader>ml  :MemoList<CR>
  nnoremap <Leader>mg  :MemoGrep<CR>

  let g:memolist_path = expand('$HOME/Dropbox/memo')

  let g:memolist_prompt_tags = 1
  let g:memolist_prompt_categories = 1

  let g:memolist_filename_prefix_none = 1

  " use denite
  let g:memolist_denite = 1
  " " use arbitrary denite source (default is 'file_rec')
  " let g:memolist_denite_source = "anything"
  " " use arbitrary denite option (default is empty)
  " let g:memolist_denite_option = "anything"
'''

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'kannokanno/previm'
hook_add = 'map <Leader>pv ;PrevimOpen<cr>'

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'yuratomo/w3m.vim'
hook_add = '''
  let g:w3m#command = '/usr/local/bin/w3m'

  " デフォルトの検索エンジンを google にする
  let g:w3m#search_engine = 'http://www.google.com/search?hl=ja&ie=' . &encoding . '&q=%s'
  nnoremap <leader>w :W3mTab google<space>
  " どうしても、な時のための外部ブラウザは chrome
  let g:w3m#external_browser = 'goole-chrome'
  nnoremap <leader>w :W3mTab google
  " ref. https://sites.google.com/site/hymd3a/vim/w3m-vim#TOC--3
'''


[[plugins]]
repo = 'mrtazz/simplenote.vim'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
  map <Leader>cal ;Calendar -view=year -split=vertical -width=24<CR>
  map <Leader>yr ;Calendar -view=year<CR>
'''


[[plugins]] # カラースキーマ
# repo = 'w0ng/vim-hybrid'
# repo = 'twerth/ir_black'
# repo = 'acoustichero/goldenrod.vim'
# repo = 'w0ng/vim-hybrid'
repo = 'cocopon/iceberg.vim'
# repo = 'morhetz/gruvbox'
hook_add = '''
  if has("nvim")
    set background=dark
    " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
    " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
    augroup color
      autocmd color VimEnter * nested colorscheme iceberg
    augroup END
  endif
  " ref.http://qiita.com/kawaz/items/ee725f6214f91337b42b#colorscheme-%E3%81%AF-vimenter-%E3%81%AB-nested-%E6%8C%87%E5%AE%9A%E3%81%A7%E9%81%85%E5%BB%B6%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B
'''

